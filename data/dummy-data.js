import Category from "../models/Category";
import SubCategory from "../models/SubCategory";
import Question from "../models/Question";
import Answere from "../models/Answeres";

export const CATEGORIES = [
  new Category('c1', 'Javascript', 'https://www.freepnglogos.com/uploads/javascript-png/javascript-logo-transparent-logo-javascript-images-3.png'),
  new Category('c2', 'Data Structure', 'https://assets.leetcode.com/static_assets/others/DS_II.png'),
  new Category('c3', 'Angular', 'https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/21_Angular_logo_logos-512.png'),
  new Category('c4', 'Jquery', 'https://icon-library.com/images/jquery-icon-png/jquery-icon-png-8.jpg'),
  new Category('c5', 'C', 'https://i.pinimg.com/originals/6e/46/e7/6e46e7dbe2bb73dacc055e5dbd85c3ad.png'),
  new Category('c6', 'PHP', 'https://i.dlpng.com/static/png/6622045_preview.png'),
  new Category('c7', 'C#', 'https://www.freeiconspng.com/uploads/c-logo-icon-18.png'),
  new Category('c8', 'Web API', 'https://dotnettrickscloud.blob.core.windows.net/uploads/CourseImages/becomeanaspnetwebapideveloper-mobile.png'), 
];

export const SUBCATEGORIES = [
  new SubCategory('sc1','c1','JS For Fresher'),
  new SubCategory('sc2','c1','JS For Intermediate'),
  new SubCategory('sc3','c1','JS ForExperienced'),
  new SubCategory('sc4','c2','DS For Fresher'),
  new SubCategory('sc5','c2','DS For Experienced'),
  new SubCategory('sc6','c3','Angular For Fresher'),
  new SubCategory('sc7','c3','Angular For Experienced'),
  new SubCategory('sc8','c4','JQ For Fresher'),
  new SubCategory('sc9','c4','JQ For Experienced'),
  new SubCategory('sc10','c5','C For Fresher'),
  new SubCategory('sc11','c5','C For Experienced'),
  new SubCategory('sc12','c6','Php For Fresher'),
  new SubCategory('sc13','c6','Php For Experienced'),
  new SubCategory('sc14','c7','C# For Fresher'),
  new SubCategory('sc15','c7','C# For Experienced'),
  new SubCategory('sc16','c8','WA For Fresher'),
  new SubCategory('sc17','c8','WA For Experienced'),

]

export const QUESTIONS = [
  new Question('q1','sc1','What are the different data types present in javascript?'),
  new Question('q2','sc1', 'Explain Hoisting in javascript'),
  new Question('q3','sc1','Why do we use the word “debugger” in javascript?'),
  new Question('q4','sc1','Difference between “ == “ and “ === “ operators'),
  new Question('q5','sc1','Difference between var and let keyword in javascript'),
  new Question('q6','sc1','Explain Implicit Type Coercion in javascript.'),
  new Question('q7','sc1','Is javascript a statically typed or a dynamically typed language?'),
  new Question('q8','sc1','What is NaN property in JavaScript?'),
  new Question('q9','sc1','Explain passed by value and passed by reference'),
  new Question('q10','sc1','What is an Immediately Invoked Function in JavaScript?'),
  new Question('q11','sc1','What do you mean by strict mode in javascript and characteristics of javascriptstrict-mode?'),
  new Question('q12','sc1','Explain Higher Order Functions in javascript.'),
  new Question('q13','sc1','Explain “this” keyword.'),
  new Question('q14','sc1','What do you mean by Self Invoking Functions?'),
  new Question('q15','sc1','Explain call(), apply() and, bind() methods.'),
  new Question('q16','sc1',' What is the difference between exec () and test () methods in javascript?'),
  new Question('q17','sc1',' What is currying in JavaScript?'),
  new Question('q18','sc1','What are some advantages of using External JavaScript?'),
  new Question('q19','sc1','Explain Scope and Scope Chain in javascript.'),
  new Question('q20','sc1','Explain Closures in JavaScript.'),
  new Question('q21','sc1','Mention some advantages of javascript.'),
  new Question('q22','sc1','What are object prototypes?'),
  new Question('q23','sc1','What are callbacks?'),
  new Question('q24','sc1','What are the types of errors in javascript?'),
  new Question('q25','sc1','What is memoization?'),
  new Question('q26','sc1','What is recursion in a programming language?'),
  new Question('q27','sc1','What is the use of a constructor function in javascript?'),
  new Question('q28','sc1','What is DOM?'),
  new Question('q29','sc1','Which method is used to retrieve a character from a certain index?'),
  new Question('q30','sc1','What do you mean by BOM?'),
  new Question('q31','sc1','What is the distinction between client-side and server-side JavaScript?'),
  new Question('q32','sc2','NaN In Javascript', 'What is NaN property in JavaScript?'),
  new Question('q33','sc2','Passed by value/refference', 'Explain passed by value and passed by reference'),
  new Question('q34','sc2','Imidiately Invoked', 'What is an Immediately Invoked Function in JavaScript?'),
  new Question('q35','sc2','Strict mode in Javascript', 'What do you mean by strict mode in javascript and characteristics of javascriptstrict-mode?'),
  new Question('q36','sc2','Higher Order Function', 'Explain Higher Order Functions in javascript.'),
]

export const ANSWERES = [
  new Answere('a1','q1','Primitive types',
  '1. String:','It represents a series of characters and is written with quotes. A string can be represented using a single or a double quote.\n','Example :\nvar str = "Vivek Singh Bisht"; //using double quotes\nvar str2 = John Doe"; //using single quotes\n',
  '2. Number:','It represents a number and can be written with or without decimals.\n','Example :\nvar x = 3; //without decimal\nvar y = 3.6; //with decimal\n',
  '3. BigInt:','This data type is used to store numbers which are above the limitation of the Number data type. It can store large integers and is represented by adding “n” to an integer literal.\n','Example :\nvar bigInteger =  234567890123456789012345678901234567890;\n',
  '4. Boolean','It represents a logical entity and can have only two values : true or false. Booleans are generally used for conditional testing.\n','Example :\nvar a = 2;\nvar b = 2;\nvar c = 3;\n(a == b) // returns false\n(a == c) //returns true\n',
  '5. Undefined','When a variable is declared but not assigned, it has the value of undefined and it’s type is also undefined.\n','Example :\nvar x; // value of x is undefined\nvar y = undefined; // we can also set the value of a variable as undefined\n',
  '6. Null','It represents a non-existent or a invalid value.\n','Example :\nvar z = null;\n',
  '7. Symbol','It is a new data type introduced in the ES6 version of javascript. It is used to store an anonymous and unique value.\n','Example :\nvar symbol1 = Symbol("symbol");\n',
  'Non-primitive','Primitive data types can store only a single value. To store multiple and complex values, non-primitive data types are used.\nObject - Used to store collection of data.\n','Example:\n// Collection of data in key-value pairs\nvar obj1 = {\n     x:  43,\n     y:  "Hello world!",\n     z: function(){\n      return this.x;\n                     }\n                    }\n// Collection of data as an ordered list\nvar array1 = [5, "Hello", true, 4.1]; \n',
  ),
  new Answere('a2','q2','','Explain Hoisting in javascript.','This means that irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.',
  'Example 1:\nhoistedVariable = 3;\nconsole.log(hoistedVariable); // outputs 3 even when the variable is declared after it is initialized\nvar hoistedVariable;\n\n Example 2:\n  hoistedFunction();  // Outputs " Hello world! " even when the function is declared after calling\n\nfunction hoistedFunction(){ \nconsole.log(" Hello world! ");} \n\nExample 3:\n// Hoisting takes place in the local scope as well\nfunction doSomething(){\n x = 33;\nconsole.log(x);\n var x;\n} '
  ),
  new Answere('a3','q3','','Why do we use the word “debugger” in javascript?','The debugger for the browser must be activated in order to debug the code. Built-in debuggers may be switched on and off, requiring the user to report faults. The remaining section of the code should stop execution before moving on to the next line while debugging.'),
  new Answere('a4','q4','','Difference between “ == “ and “ === “ operators','Both are comparison operators. The difference between both the operators is that “==” is used to compare values whereas, “ === “ is used to compare both values and types', 'Example:\nvar x = 2;\nvar y = "2";\n(x == y)  // Returns true since the value of both x and y is the same\n(x === y) // Returns false since the typeof x is "number" and typeof y is "string"'),
  new Answere('a5','q5','','Difference between var and let keyword in javascript', 'Some differences are \nFrom the very beginning, the "var" keyword was used in JavaScript programming whereas the keyword "let" was just added in 2015.\nThe keyword "var" has a function scope. Anywhere in the function, the variable specified using var is accessible but in ‘let’ the scope of a variable declared with the "let" keyword is limited to the block in which it is declared. Lets start with a Block Scope.\nIn ECMAScript 2015, let and const are hoisted but not initialized. Referencing the variable in the block before the variable declaration results in a ReferenceError because the variable is in a "temporal dead zone" from the start of the block until the declaration is processed'),
  new Answere('a6','q6','','Explain Implicit Type Coercion in javascript\n','Implicit type coercion in javascript is the automatic conversion of value from one data type to another. It takes place when the operands of an expression are of different data types.\nString coercion\nString coercion takes place while using the ‘ + ‘ operator. When a number is added to a string, the number type is always converted to the string type.','Example 1\nvar x = 3;\nvar y = "3";\nx + y // Returns "33" '),
  new Answere ('a7','q7','','Is javascript a statically typed or a dynamically typed language?','JavaScript is a dynamically typed language. In a dynamically typed language, the type of a variable is checked during run-time in contrast to a statically typed language, where the type of a variable is checked during compile-time.\nSince javascript is a loosely(dynamically) typed language, variables in JS are not associated with any type. A variable can hold the value of any data type.','For example, a variable that is assigned a number type can be converted to a string type:\nvar a = 23;\nvar a = "Hello World!";'),
  new Answere ('a8','q8','','What is NaN property in JavaScript?','NaN property represents the “Not-a-Number” value. It indicates a value that is not a legal number.\ntypeof of NaN will return a Number.\nTo check if a value is NaN, we use the isNaN() function,\nNote- isNaN() function converts the given value to a Number type, and then equates to NaN.\n','Example:\nisNaN("Hello")  // Returns true\nisNaN(345)   // Returns false\nisNaN("1")  // Returns false, since "1" is converted to Number type which results in 0 ( a number)\nisNaN(true) // Returns false, since true converted to Number type results in 1 ( a number)\nisNaN(false) // Returns false\nisNaN(undefined) // Returns true'),
  new Answere ('a9','q9','','Explain passed by value and passed by reference','In JavaScript, primitive data types are passed by value and non-primitive data types are passed by reference.\nFor understanding passed by value and passed by reference, we need to understand what happens when we create a variable and assign a value to it,\nvar x = 2;\nIn the above example, we created a variable x and assigned it a value of “2”. In the background, the “=” (assign operator) allocates some space in the memory, stores the value “2” and returns the location of the allocated memory space. Therefore, the variable x in the above code points to the location of the memory space instead of pointing to the value 2 directly.\nAssign operator behaves differently when dealing with primitive and non-primitive data types,\n','Example:\nvar y = 234;\nvar z = y'),
  new Answere ('a10','q10','',''),
  new Answere ('a11','q11','',''),
  new Answere ('a12','q12','',''),
  new Answere ('a13','q13','',''),
  new Answere ('a14','q14','',''),
  new Answere ('a15','q15','',''),
  new Answere ('a16','q16','',''),
  new Answere ('a17','q17','',''),
  new Answere ('a18','q18','',''),
  new Answere ('a19','q19','',''),
  new Answere ('a20','q20','',''),
  new Answere ('a21','q21','',''),
  new Answere ('a22','q22','',''),
  new Answere ('a23','q23','',''),
  new Answere ('a24','q24','',''),
  new Answere ('a25','q25','',''),
  new Answere ('a26','q26','',''),
  new Answere ('a27','q27','',''),
  new Answere ('a28','q28','',''),
  new Answere ('a29','q29','',''),
  new Answere ('a30','q30','',''),
  new Answere ('a31','q31','',''),
  new Answere ('a32','q32','',''),
  new Answere ('a33','q33','',''),
  new Answere ('a34','q34','',''),
  new Answere ('a35','q35','',''),
  new Answere ('a36','q36','',''),
]
